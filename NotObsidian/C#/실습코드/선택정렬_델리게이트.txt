
namespace ConsoleApp1
{
	class SortObject 
	{
		public delegate bool CompareDelegate(int arg1, int arg2); // 델리게이트 선언
		int [] numbers;
		
		public SortObject(int[] numbers)
		{
			this.numbers = numbers;
		}

		public void Sort(CompareDelegate compareMethod) // 넣음
		{
			int temp;
			for (int i = 0; i < numbers.Length; i++)
			{
				int lowPos = i;
				for (int j = i + 1; j < numbers.Length; j++)
				{
					if (compareMethod(numbers[j], numbers[lowPos])) // 사용 : 이 비교식은 True나 False를 반환함 : delegate의 정의에 의해서
					{
						lowPos = j;
					}
				}
				temp = numbers[lowPos];
				numbers[lowPos] = numbers[i];
				numbers[i] = temp;
			}
		}

		public void Display() // numbers 요소들 화면에 출력
		{
			for (int i = 0; i < numbers.Length; i++){
				Console.WriteLine(numbers[i]);
			}
		}
	}
	class Program
	{
		static void Main(string[] args)
		{
			int[] intArray = new int[] {5, 2, 3, 1, 0, 4};
			SortObject so = new SortObject(intArray);

			so.Sort(AscendingCompare);
			so.Display();

			Console.WriteLine();

			so.Sort(DescendingCompare);
			so.Display();

			
		}
		// 델리게이트 = 메서드가 들어갈 틀인거고 (인풋 인자 2개, 아웃풋 bool 1개)
		// 여기에 있는 건 메서드 자체가 정의된 거임 -> 이 틀이 델리게이트에 맞다면, 델리게이트 객체로 정의될 수 있음
		// 델리게이트 = 클래스인데 메서드가 들어간다는 개념으로 일단 이해하고 넘어가자
		public static bool AscendingCompare(int arg1, int arg2)
		{
			return (arg1 < arg2);
		}

		public static bool DescendingCompare(int arg1, int arg2)
		{
			return (arg1 > arg2);
		}
	}
}